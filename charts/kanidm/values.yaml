# yaml-language-server: $schema=values.schema.json

global:
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- Global Docker image registry
  imageRegistry: ""
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/imagePullSecrets
  # required: false
  # @schema
  # -- Global Docker registry secret names as an array
  imagePullSecrets: []
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- Global StorageClass for Persistent Volume(s)
  storageClass: ""

# -- Override Kubernetes version
kubeVersion: ""

# @schema
# items:
#   type: string
# @schema
# -- Override Kubernetes API versions reported by .Capabilities
apiVersions: []

# @schema
# required: false
# type: [string, null]
# @schema
# -- String to partially override `common.names.name`
nameOverride: ""

# @schema
# required: false
# type: [string, null]
# @schema
# -- String to fully override `common.names.fullname`
fullnameOverride: ""

# @schema
# required: false
# type: [string, null]
# @schema
# -- Overrides the namespace to place resources into
namespaceOverride: ""

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/labels
# required: false
# @schema
# -- Set additional labels. Helm templates can be used.
commonLabels: {}
# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
# required: false
# @schema
# -- Set additional annotations. Helm templates can be used.
commonAnnotations: {}

image:
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- image registry
  registry: ""
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- image repository
  repository: "kanidm/server"
  # @schema
  # required: false
  # enum:
  # - Always
  # - IfNotPresent
  # - Never
  # - null
  # @schema
  # -- image pull policy
  pullPolicy: Always
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- Overrides the image tag
  tag: ""
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- Overrides the image digest
  digest: ""
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/imagePullSecrets
  # required: false
  # @schema
  # -- If defined, uses a Secret to pull an image from a private Docker registry or repository.
  pullSecrets: []

toolsImage:
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- image registry
  registry: ""
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- image repository
  repository: kanidm/tools
  # @schema
  # required: false
  # enum:
  # - Always
  # - IfNotPresent
  # - Never
  # - null
  # @schema
  # -- image pull policy
  pullPolicy: Always
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- Overrides the image tag
  tag: ""
  # @schema
  # required: false
  # type: [string, null]
  # @schema
  # -- Overrides the image digest
  digest: ""

config:
  # -- Enables creation of a ConfigMap containing the server configuration
  # file.
  create: true
  # @schema
  # required: true
  # format: idn-hostname
  # examples: [idm.example.com]
  # @schema
  domain: ""
  data:
    # -- The contents of the server configuration file.
    server.toml: |
      version = "2"
      db_path = "/data/kanidm.db"
      tls_chain = "/certs/tls.crt"
      tls_key = "/certs/tls.key"

# # @schema
# # minimum: 1
# # @schema
# # -- Number of replicas to deploy
# replicaCount: 1

# @schema
# minimum: 0
# @schema
# -- The number of old ReplicaSets to retain
revisionHistoryLimit: 10

# # -- The update strategy for the deployment or statefulset
# updateStrategy:
#   # @schema
#   # enum: [Recreate, RollingUpdate, OnDelete]
#   # @schema
#   type: RollingUpdate

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
# required: false
# @schema
# -- Annotations to be added to the daemonset
daemonsetAnnotations: {}

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
# required: false
# @schema
# -- Annotations to be added to the deployment
deploymentAnnotations: {}

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
# required: false
# @schema
# -- Annotations to be added to the statefulset
statefulsetAnnotations: {}

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/labels
# required: false
# @schema
# -- Labels to be added to the pods
podLabels: {}

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
# required: false
# @schema
# -- Annotations to be added to the pods
podAnnotations: {}

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/securityContext
# @schema
# -- pod-level security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10389
  runAsGroup: 10389
  fsGroup: 10389
  seccompProfile:
    type: RuntimeDefault

# @schema
# required: false
# type: [boolean, null]
# @schema
hostUsers: false

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/container-v1.json#/properties/securityContext
# @schema
containerSecurityContext:
  privileged: false
  runAsNonRoot: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

persistence:
  storageClass: ""
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
  # required: false
  # @schema
  # -- Annotations to add to the pvc
  annotations: {}
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/persistentvolumeclaimspec.json#/properties/accessModes
  # @schema
  accessModes:
    - ReadWriteOnce
  size: 2Gi
  existingClaim: ""
  # @schema
  # required: false
  # anyOf:
  # - $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/persistentvolumeclaimspec.json#/properties/selector
  # - type: null
  # @schema
  selector: null
  # @schema
  # required: false
  # anyOf:
  # - $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/persistentvolumeclaimspec.json#/properties/dataSource
  # - type: null
  # @schema
  dataSource: null

cert:
  create: true
  issuer:
    name: ""
    kind: "ClusterIssuer"

adminSecret:
  create: true
  name: ""
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
  # required: false
  # @schema
  annotations: {}

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/resources
# @schema
# -- Resource limits and requests for the controller pods.
resources: {}

# @schema
# enum: ["none", "nano", "small", "medium", "large", "xlarge", "2xlarge"]
# @schema
# -- Set container resources according to one common preset. This is ignored if resources is set (resources is recommended for production).
resourcesPreset: "none"

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: false
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
  # required: false
  # @schema
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  ports:
    https: 8443
    ldaps:
      enabled: false
      port: 3636
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
  # @schema
  # -- Additional annotations for the Service resource
  annotations: {}

networkPolicy:
  enabled: true
  # @schema
  # enum:
  #   - kubernetes
  #   - cilium
  # @schema
  flavor: "kubernetes"
  allowExternal: true
  # -- Allow the pod to access any range of port and all destinations
  allowExternalEgress: true
  # -- Allow access from pods with client label set to `true`. Ignored if `networkPolicy.allowExternal` is `true`.
  addExternalClientAccess: true
  # @schema
  # required: false
  # items:
  #   anyOf:
  #     - $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/networkpolicyingressrule.json
  #     - type: object
  #       additionalProperties: true
  # @schema
  # -- Add extra ingress rules to the NetworkPolicy
  extraIngress: []
  # @schema
  # required: false
  # items:
  #   anyOf:
  #     - $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/networkpolicyegressrule.json
  #     - type: object
  #       additionalProperties: true
  # @schema
  # -- Add extra egress rules to the NetworkPolicy (ignored if allowExternalEgress=true)
  extraEgress: []
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/labels
  # @schema
  # -- Labels to match to allow traffic from other pods. Ignored if `networkPolicy.allowExternal` is true.
  ingressPodMatchLabels: {}
  # @schema
  # items:
  #   type: object
  #   properties:
  #     name:
  #       type: string
  #     podLabels:
  #       required: false
  #       $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/labels
  # @schema
  # -- Namespaces, from which, to allow traffic. Ignored if `networkPolicy.allowExternal` is true.
  ingressNamespaces: []

ingress:
  # -- Enable ingress record generation
  enabled: false
  # -- IngressClass that will be be used to implement the Ingress
  className: ""
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
  # @schema
  # -- Additional annotations for the Ingress resource
  annotations: {}
  hostname: ""
  path: "/"
  pathType: ImplementationSpecific
  extraPaths: []
  # @schema
  # items:
  #   type: object
  #   properties:
  #     name:
  #       type: string
  #     path:
  #       required: false
  #       type: string
  #       default: "/"
  #     pathType:
  #       required: false
  #       type: string
  #       default: ImplementationSpecific
  # @schema
  extraHosts: []
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/ingressspec.json#/properties/tls
  # @schema
  # -- An array with the tls configuration
  tls: []

httpRoute:
  # -- Enable HttpRoute record generation
  enabled: false
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
  # @schema
  # -- Additional annotations for the HttpRoute resource
  annotations: {}
  # -- The DNS name to respond to
  hostnames: []
  parentRefs: []
  # -- An array of rules to use for the route,
  # the service backend will be automatically added
  # to all rules
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /status
    port: https
    scheme: HTTPS
readinessProbe:
  httpGet:
    path: /status
    port: https
    scheme: HTTPS

autoscaling:
  vpa:
    enabled: false
    # @schema
    # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
    # @schema
    annotations: {}
    controlledResources: []
    maxAllowed: {}
    minAllowed: {}

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/container-v1.json#/properties/env
# @schema
# -- Additional environment variables to be added to the pods
extraEnvVars: []

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/container-v1.json#/properties/envFrom
# @schema
# -- Additional environment variables to be added to the pods
extraEnvFrom: []

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/volumes
# @schema
# -- Additional volumes on the output Deployment definition.
extraVolumes: []

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/container-v1.json#/properties/volumeMounts
# @schema
# -- Additional volumeMounts on the output Deployment definition.
extraVolumeMounts: []

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/containers
# @schema
initContainers: []

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/nodeSelector
# @schema
# -- Node labels for pod assignment
nodeSelector: {}

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/tolerations
# @schema
# -- Toleration labels for pod assignment
tolerations: []

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/affinity
# @schema
# -- Affinity settings for pod assignment
affinity: {}

# @schema
# $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/topologySpreadConstraints
# @schema
topologySpreadConstraints: []

postJob:
  rbac:
    create: true
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: false
    # @schema
    # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
    # required: false
    # @schema
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/annotations
  # required: false
  # @schema
  # -- Annotations to be added to the pods
  podAnnotations: {}
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/objectmeta.json#/properties/labels
  # required: false
  # @schema
  # -- Labels to be added to the pods
  podLabels: {}
  resources: {}
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/podspec-v1.json#/properties/securityContext
  # @schema
  # -- pod-level security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 65534
    seccompProfile:
      type: RuntimeDefault
  # @schema
  # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/container-v1.json#/properties/securityContext
  # @schema
  containerSecurityContext:
    privileged: false
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"

# @schema
# type: array
# items:
#   type: object
#   properties:
#     name:
#       type: string
#     memberOf:
#       required: false
#       type: array
#       items:
#         type: string
# @schema
groups: []

# @schema
# type: array
# items:
#   type: object
#   properties:
#      name:
#        type: string
#      displayName:
#        type: string
#      email:
#        required: false
#        type: string
#        format: idn-email
#      groups:
#        required: false
#        type: array
#        items:
#          type: string
# @schema
users: []

# @schema
# type: array
# items:
#   type: object
#   properties:
#      name:
#        type: string
#      displayName:
#        type: string
#      landingPage:
#        type: string
#        format: uri
#      public:
#        required: false
#        type: boolean
#        default: false
#      localhost:
#        required: false
#        type: boolean
#        default: false
#      insecureDisablePkce:
#        required: false
#        type: boolean
#        default: false
#      redirects:
#        required: false
#        type: array
#        items:
#          type: string
#          format: uri
#      scopes:
#        type: object
#        additionalProperties:
#          type: array
#          items:
#            type: string
#      customClaims:
#        required: false
#        type: array
#        items:
#          type: object
#          properties:
#            name:
#              type: string
#            group:
#              type: string
#            values:
#              type: array
#              item: string
#      secret:
#        required: false
#        type: object
#        properties:
#          name:
#            type: string
#          key:
#            type: string
#          annotations:
#            required: false
#            type: object
#            additionalProperties:
#              type: string
# @schema
oauth2: []

# @schema
# required: false
# additionalProperties: true
# @schema
common: {}
